---
- name: Create new LXC container in Proxmox pve1 Host
  vars_files:
   - secrets.yml
  vars:
    api_user: "{{ proxmox.api_user }}" # Proxmox user
    api_password: "{{ proxmox.api_password }}" # Password in plaintext !!!
    api_host: "{{ proxmox.api_host }}" # Proxmox hostname
    node: 'pve1' # Name of Proxmox host
    cpus: '1'
    cpuunits: '1000'
    ostemplate: 'truenas:vztmpl/debian-11-standard_11.3-1_amd64.tar.zst' # Or use local:vztmpl/... as discussed
    storage: 'truenas' # Or use 'local' as discussed
    username: root #username to save in bitwarden
    vrf: "{{ netbox.vrf }} "

  vars_prompt:
    - name: hostname
      prompt: What hostname should be used?
      private: false

    - name: password
      prompt: What root password should be used?
      default: '{{ lookup("ansible.builtin.password", "/tmp/passwordfile chars=ascii_letters,digits,punction") }}'

    - name: cores
      prompt: How many cores should the server have?
      default: '2'
      private: false

    - name: memory
      prompt: How much memory in MB should the server have?
      default: '1024'
      private: false

    - name: disk
      prompt: How much disk in GB should the server have?
      default: '120'
      private: false

    - name: netif
      prompt: What network conf should the server have?
      default: '{"net0":"name=eth0,ip=dhcp,ip6=dhcp,bridge=vmbr0"}'
      private: false
      unsafe: true

    - name: tenant
      prompt: What tenant should this server belong to?
      default: "{{ netbox.default_tenant }}"
      private: false


  hosts: tags_proxmox
  tasks:

  - name: Create password in bitwarden
    local_action: raw bw get template item | jq ".name=\"{{ hostname }}\" | .login=$(bw get template item.login | jq '.username="{{ username }}" | .password="{{ password }}"')" | bw encode | bw create item

  - name: 'Create Container'
    proxmox:
      #vmid: '300' # Specifying Container ID
      api_user: '{{ api_user }}'
      api_password: '{{ api_password }}'
      api_host: '{{ api_host }}'
      password: '{{ password }}' 
      hostname: '{{ hostname }}'
      node: '{{ node }}' 
      cores: '{{ cores }}'
      cpus: '{{ cpus }}'
      cpuunits: '{{ cpuunits }}'
      ostemplate: '{{ ostemplate }}'
      storage: '{{ storage }}'
      disk: '{{ disk }}'     
      memory: '{{ memory }}'
      netif: '{{ netif }}'
      state: 'present'
      onboot: 'yes'
      unprivileged: false
    register: proxmox_data

  - name: Set VM_ID
    set_fact:
      proxmox_vm: "{{ proxmox_data.msg | regex_search('VM ([0-9]+) from', '\\1') | first }}" 

  - name: 'Start Container'
    proxmox:
      vmid: '{{ proxmox_vm }}'
      api_user: '{{ api_user }}'
      api_password: '{{ api_password }}'
      api_host: '{{ api_host }}'
      state: started

  - name: 'Add ssh folder'
    raw: 'lxc-attach {{ proxmox_vm }} mkdir /root/.ssh'
    ignore_errors: yes
    #Add SSH key from the proxmox server
  - name: 'Add ssh key'
    raw: 'pct push {{ proxmox_vm }} /root/.ssh/authorized_keys /root/.ssh/authorized_keys'

  - name: Create virtual machine within NetBox with only required information
    local_action:
      module: netbox.netbox.netbox_virtual_machine
      netbox_url: "{{ netbox.url }}"
      netbox_token: "{{ netbox.token }}"
      data:
        name: '{{ hostname }}'
        cluster: svs7-pv
        vcpus: '{{ cores }}'
        memory: '{{ memory }}'
        disk: '{{ disk }}'
        site: svs7
        platform: Debian
        tenant: "{{ tenant }}"
        tags:
          - debian_containers
          - linux_servers
      state: present

  - name: Gather MAC address
    slurp:
      src: '/etc/pve/lxc/{{ proxmox_vm }}.conf'
    register: mac_address_encoded

  - name: get IP adress
    raw: 'lxc-attach {{ proxmox_vm }} ip addr show eth0'
    register: interface

  - name: Set MAC address and IP adress
    vars:
      regex_ipv4: 'inet (?P<ipv4>(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\/(?P<cidr>[0-2][0-9])'
      regex_ipv6: 'inet6 (?P<ipv6>(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))\/(?P<cidr>((1(1[0-9]|2[0-8]))|([0-9][0-9])|([0-9]))) scope global dynamic'
    set_fact:
      mac_address: '{{ mac_address_encoded.content | b64decode | regex_search("([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})") }}'
      ipv4_adress: '{{ interface.stdout | regex_search(regex_ipv4, "\g<ipv4>") | first }}'
      ipv4_cidr: '{{ interface.stdout | regex_search(regex_ipv4, "\g<ipv4>") | first }}/{{ interface.stdout | regex_search(regex_ipv4, "\g<cidr>") | first }}'
      ipv6_adress: '{{ interface.stdout | regex_search(regex_ipv6, "\g<ipv6>") | first }}'
      ipv6_cidr: '{{ interface.stdout | regex_search(regex_ipv6, "\g<ipv6>") | first }}/{{ interface.stdout | regex_search(regex_ipv6, "\g<cidr>") | first }}'

  - name: Create interface within NetBox with required information
    local_action:
      module: netbox.netbox.netbox_vm_interface
      netbox_url: "{{ netbox.url }}"
      netbox_token: "{{ netbox.token }}"
      data:
        name: eth0
        mac_address: '{{ mac_address }}'
        virtual_machine: '{{ hostname }}'
        enabled: true
      state: present

  - name: Create IPv4 within NetBox with required information
    local_action:
      module: netbox.netbox.netbox_ip_address
      netbox_url: "{{ netbox.url }}"
      netbox_token: "{{ netbox.token }}"
      data:
        address: '{{ ipv4_adress }}'
        vrf: '{{ vrf }}'
        tenant: '{{ tenant }}'
        assigned_object:
          name: eth0
          virtual_machine: '{{ hostname }}'
        dns_name: '{{ hostname }}'
      state: present

  - name: Create IPv6 within NetBox with required information
    local_action:
      module: netbox.netbox.netbox_ip_address
      netbox_url: "{{ netbox.url }}"
      netbox_token: "{{ netbox.token }}"
      data:
        address: '{{ ipv6_adress }}'
        vrf: '{{ vrf }}'
        tenant: '{{ tenant }}'
        assigned_object:
          name: eth0
          virtual_machine: '{{ hostname }}'
        dns_name: '{{ hostname }}'
      state: present

  - name: Assign primary IP-adresses in Netbox
    local_action:
      module: netbox.netbox.netbox_virtual_machine
      netbox_url: "{{ netbox.url }}"
      netbox_token: "{{ netbox.token }}"
      data:
        name: '{{ hostname }}'
        primary_ip4: '{{ ipv4_adress }}'
        primary_ip6: '{{ ipv6_adress }}'
      state: present

  - meta: refresh_inventory

- name: Install linux requirement
  ansible.builtin.import_playbook: linux-requirement.yml
